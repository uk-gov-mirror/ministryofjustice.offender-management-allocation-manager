references:
  defaults: &defaults
    working_directory: ~/repo

  github_team_name_slug: &github_team_name_slug
    GITHUB_TEAM_NAME_SLUG: offender-management

  deploy_container_config: &deploy_container_config
    resource_class: small
    docker:
      - image: ${ECR_ENDPOINT}/cloud-platform/tools:circleci

  test_container_config: &test_container_config
    resource_class: medium
    docker:
      - image: circleci/ruby:2.6.6-node-browsers
        environment:
          RAILS_ENV: test
          PGHOST: 127.0.0.1
          PGUSER: ubuntu
          RACK_ENV: test
          VCR: 1
          PARALLEL_TEST_PROCESSORS: 7
      - image: circleci/postgres:10.5-alpine
        environment:
          POSTGRES_USER: ubuntu
          POSTGRES_PASSWORD: ""
          POSTGRES_DB: offender-management-allocation-manager_test
      - image: redis

  install_gpg: &install_gpg
    run:
      name: Install GPG
      command: |
        apk add \
          --no-cache \
          --no-progress \
          gnupg

  configure_gpg: &configure_gpg
    run:
      name: Configure GPG
      command: |
        echo "${GPG_PRIVATE_KEY}" | base64 -d | gpg --batch --allow-secret-key-import --import

  decrypt_secrets: &decrypt_secrets
    run:
      name: Decrypt secrets file
      command: |
        gpg --export-ownertrust > /tmp/ownertrust.txt
        echo $GPG_KEY_ID:1 >> /tmp/ownertrust.txt
        gpg --import-ownertrust /tmp/ownertrust.txt
        gpgconf --kill gpg-agent
        gpg-agent --daemon --allow-preset-passphrase
        /usr/libexec/gpg-preset-passphrase --preset --passphrase $GPG_PASSPHRASE $GPG_KEY_KEYGRIP_ID
        git-crypt unlock

  install_aws_cli: &install_aws_cli
    run:
      name: Set up aws
      command: |
        sudo apt-get update
        sudo apt-get --assume-yes install python3-pip
        sudo pip3 install awscli

  build_docker_image: &build_docker_image
    run:
      name: Build allocation-manager docker image
      command: |
        export BUILD_DATE=$(date -Is) >> $BASH_ENV
        source $BASH_ENV
        docker build \
          --build-arg VERSION_NUMBER=${CIRCLE_BUILD_NUM} \
          --build-arg COMMIT_ID=${CIRCLE_SHA1} \
          --build-arg BUILD_DATE=${BUILD_DATE} \
          --build-arg BUILD_TAG=${CIRCLE_BRANCH} \
          -t app .

  push_docker_image: &push_docker_image
    run:
      name: Push allocation-manager docker image
      command: |
        login="$(aws ecr get-login --region eu-west-2 --no-include-email)"
        ${login}
        docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:${CIRCLE_SHA1}"
        if [ "${CIRCLE_BRANCH}" == "main" ]; then
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:latest"
        else
          docker tag app "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:testing"
          docker push "${ECR_ENDPOINT}/${GITHUB_TEAM_NAME_SLUG}/${REPONAME}:testing"
        fi
      environment:
        <<: *github_team_name_slug
        REPONAME: offender-management-allocation-manager

  install_firefox_and_geckodriver: &install_firefox_and_geckodriver
    run:
      name: install firefox and geckodriver
      command: |
        wget -L "https://ftp.mozilla.org/pub/firefox/releases/65.0/linux-x86_64/en-US/firefox-65.0.tar.bz2" -O "firefox-65.0.tar.bz2"
        tar xjf "firefox-65.0.tar.bz2"
        sudo rm -rf /opt/firefox
        sudo mv firefox /opt/
        sudo ln -sf /opt/firefox/firefox /usr/bin/firefox
        wget https://github.com/mozilla/geckodriver/releases/download/v0.23.0/geckodriver-v0.23.0-linux64.tar.gz
        tar -zxvf geckodriver-v0.23.0-linux64.tar.gz
        sudo mv geckodriver /usr/local/bin/

  install_geckodriver: &install_geckodriver
    run:
      name: install geckodriver
      command: |
        if [ `which geckodriver` ]
        then
           geckodriver --version
        else
          wget https://github.com/mozilla/geckodriver/releases/download/v0.24.0/geckodriver-v0.24.0-linux64.tar.gz
          tar -zxvf geckodriver-v0.24.0-linux64.tar.gz
          mv geckodriver ~/.local/bin
        fi

  restore_cache: &restore_cache
    restore_cache:
      keys:
        - integration-tests-v2-{{ checksum "Gemfile.lock" }}
        - integration-tests-v2-

  install_gems: &install_gems
    run:
      name: Clone and install gems
      command: |
        git clone git@github.com:ministryofjustice/offender-management-integration-tests.git
        cd offender-management-integration-tests
        bundle check --path vendor/bundle || bundle install --path vendor/bundle

  save_cache: &save_cache
    save_cache:
      key: integration-tests-v2-{{ checksum "Gemfile.lock" }}
      paths:
        - ~/staging/vendor/bundle

  store_test_results: &store_test_results
    store_test_results:
      path: ./offender-management-integration-tests/screenshots

  store_artifacts: &store_artifacts
    store_artifacts:
      path: ./offender-management-integration-tests/screenshots

version: 2.1
jobs:
  install_dependencies:
    <<: *defaults
    <<: *test_container_config
    steps:
      - run:
          name: Install CMake
          command: |
            sudo apt update && sudo apt install cmake
      - checkout
      - *install_geckodriver
      - attach_workspace:
          at: ~/repo
      - run:
          name: Which bundler?
          command: bundle -v
      - restore_cache:
          keys:
            - allocation-manager-v3-{{ checksum "Gemfile.lock" }}
            - allocation-manager-v3-
      - run:
          name: Install frontend modules
          command: yarn install
      - run: bundle check --path vendor/bundle || bundle install --path vendor/bundle
      - run:
          name: Ensure Local Bin Drectory exists
          command: mkdir -p ~/.local/bin
      - run:
          name: Setup MSOffice Crypt
          command: |
            if [ `which msoffice-crypt` ]
            then
              echo "msoffice-crypt cached ok"
            else
              mkdir ./build
              cd ./build
              git clone https://github.com/herumi/cybozulib
              git clone https://github.com/herumi/msoffice
              cd msoffice
              make -j RELEASE=1
              mv ./bin/msoffice-crypt.exe ~/.local/bin/msoffice-crypt
              chmod +x ~/.local/bin/msoffice-crypt
              cd ../..
              rm -rf build
            fi
      - run:
          name: Download Code Climate
          command: |
            if [ `which cc-test-reporter` ]
            then
              echo "CC test reporter cached"
            else
              curl -L https://codeclimate.com/downloads/test-reporter/test-reporter-latest-linux-amd64 > ~/.local/bin/cc-test-reporter
              chmod +x ~/.local/bin/cc-test-reporter
            fi
      - save_cache:
          key: allocation-manager-v3-{{ checksum "Gemfile.lock" }}
          paths:
            - ~/repo/vendor/bundle
            - ~/.local/bin
      - persist_to_workspace:
          root: ~/
          paths:
            - repo/vendor/bundle
            - repo/node_modules/
            - .local/bin
  rubocop:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: bundle check --path vendor/bundle || bundle install --path vendor/bundle
      - run:
          name: Rubocop
          command: bundle exec rubocop
  test:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run: bundle check --path vendor/bundle || bundle install --path vendor/bundle
      - run:
          name: Security analysis
          command: bundle exec brakeman -o ~/test-results/brakeman/brakeman.json -o ~/test-results/brakeman/brakeman.html
      - run:
          name: Setup database
          command: |
            bundle exec rake parallel:setup
      - run:
          name: Run tests
          command: |
            cc-test-reporter before-build
            bundle exec rake parallel:spec
            cc-test-reporter after-build --coverage-input-type lcov --exit-code $?
          environment:
            ALLOCATION_MANAGER_HOST: https://allocation-manager-staging.apps.live-1.cloud-platform.service.justice.gov.uk
            RAILS_ENV: test
            RACK_ENV: test
      - run:
          name: Check Coverage using undercover gem
          command: |
            bundle exec undercover --compare origin/main -l coverage/lcov.info
      - store_test_results:
          path: coverage
      - store_artifacts:
          path: coverage
      - store_artifacts:
          path: ~/test-results

  build_and_push_docker_image:
    <<: *defaults
    <<: *test_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - setup_remote_docker:
          docker_layer_caching: true
      - *install_aws_cli
      - *build_docker_image
      - *push_docker_image

  deploy_staging:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - run:
          name: Kubectl deployment staging setup
          command: |
            setup-kube-auth
            kubectl config use-context staging
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to staging
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/cron-*.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/staging/deployment.yaml
            kubectl annotate deployments/allocation-manager kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/staging
          environment:
            <<: *github_team_name_slug

  test_staging:
    <<: *test_container_config
    working_directory: ~/staging
    steps:
      - checkout
      - *restore_cache
      - *install_gems
      - *save_cache
      - run:
          name: run integration tests
          command: |
            cd offender-management-integration-tests
            VCR=1 bundle exec rspec spec/integration --no-color --format documentation --format RspecJunitFormatter -o screenshots/rspec.xml
          environment:
            STAGING_START_PAGE: https://allocation-manager-staging.apps.live-1.cloud-platform.service.justice.gov.uk
      - *store_test_results
      - *store_artifacts

  deploy_preprod:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Kubectl deployment preproduction setup
          command: |
            setup-kube-auth
            kubectl config use-context preprod
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to pre-production
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/preprod/cron-*.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/preprod/deployment.yaml
            kubectl annotate deployments/allocation-manager kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/preprod
          environment:
            <<: *github_team_name_slug

  deploy_production:
    <<: *deploy_container_config
    steps:
      - checkout
      - attach_workspace:
          at: ~/repo
      - run:
          name: Kubectl deployment production setup
          command: |
            setup-kube-auth
            kubectl config use-context production
      - *install_gpg
      - *configure_gpg
      - *decrypt_secrets
      - deploy:
          name: Deploy to production
          command: |
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/cron-*.yaml
            sed -i -e s/:latest/:$CIRCLE_SHA1/ deploy/production/deployment.yaml
            kubectl annotate deployments/allocation-manager kubernetes.io/change-cause="$CIRCLE_BUILD_URL"
            kubectl apply --record=false -f ./deploy/production
          environment:
            <<: *github_team_name_slug

workflows:
  build_and_test:
    jobs:
      - install_dependencies
      - rubocop:
          requires:
            - install_dependencies
      - test:
          requires:
            - rubocop
      - build_and_push_docker_image:
          requires:
            - test
          filters:
            branches:
              only:
                - main
                - preproduction
      - deploy_staging:
          requires:
            - build_and_push_docker_image
          filters:
            branches:
              only:
                - main
      - test_staging:
          requires:
            - build_and_push_docker_image
            - deploy_staging
          filters:
            branches:
              only: main
      - deploy_production_approval:
          type: approval
          requires:
            - test_staging
          filters:
            branches:
              only: main
      - deploy_production:
          requires:
            - deploy_production_approval
          filters:
            branches:
              only: main
      - deploy_preprod:
          requires:
            - build_and_push_docker_image
          filters:
            branches:
              only: preproduction
